#!/bin/bash

set -o pipefail

# Help function
update_resin_supervisor_help() {
    cat << EOF
Wrapper to run supervisor agent updates on balena distributions.
$0 <OPTION>

Options:
  -h, --help
        Display this help and exit.

  -n, --no-start-stop-supervisor
        Do not start/stop the supervisor.
EOF
}

START_STOP_SUPERVISOR=1
# Parse arguments
while [ $# -gt 0 ]; do
    arg="$1"

    case $arg in
        -h|--help)
            update_resin_supervisor_help
            exit 0
            ;;
        -n|--no-start-stop-supervisor)
            START_STOP_SUPERVISOR=0
            shift
            ;;
        *)
            echo "ERROR: Unrecognized option $1."
            ;;
    esac
    shift
done

# Don't source before parsing args - resin-vars parses args too
# shellcheck disable=SC1091
. /usr/sbin/resin-vars

# A temporary file used until next reboot
UPDATECONF=/tmp/update-supervisor.conf

# If the user api key exists we use it instead of the deviceApiKey as it means we haven't done the key exchange yet
_device_api_key=${PROVISIONING_API_KEY:-$DEVICE_API_KEY}

balena_imageid_from_digest() {
        local _image="$1"
        local _digest
        local _image_name
        local _imageid
        local _digest_check
        _image_name=$(echo "${_image}" | cut -d "@" -f1)
        _digest=$(echo "${_image}" | cut -d "@" -f2)
        _imageid=$(balena images --filter=reference="${_image_name}" --format "{{.ID}}")
        _digest_check=$(balena images --digests --filter=reference="${_image_name}" --format "{{.Digest}}")
        if [ "${_digest}" == "${_digest_check}" ]; then
                echo "${_imageid}"
        fi
}

error_handler() {
    # shellcheck disable=SC2181
    [ $? -eq 0 ] && exit 0

    # If docker pull fails, start the old supervisor again and exit
    rm -rf $UPDATECONF
    if [ "${START_STOP_SUPERVISOR}" -eq 1 ]; then
        systemctl start resin-supervisor
    fi
    exit 1
}

trap error_handler EXIT

# Detect containers engine
if which docker > /dev/null 2>&1; then
    DOCKER=docker
elif which rce > /dev/null 2>&1; then
    DOCKER=rce
elif which balena > /dev/null 2>&1; then
    DOCKER=balena
else
    echo "ERROR: No container engine detected."
    error_handler "no container engine detected"
fi

# Get target supervisor details from API.
# The script will exit if curl does not get a valid response.
# Getting data separately before reading it fixes error handling.
echo "Getting image name and version..."
if [ -n "$API_ENDPOINT" ] && [ -n "${UUID}" ] && [ -n "$_device_api_key" ] && data=$(curl --silent --header "Authorization: Bearer $_device_api_key" --header "User-Agent:" --compressed "${API_ENDPOINT}/v6/supervisor_release?\$select=supervisor_version,image_name&\$filter=should_manage__device/any(d:d/uuid%20eq%20'${UUID}')" | jq -e -r '.d[0].supervisor_version,.d[0].image_name'); then
    echo "Supervisor configuration found from API."

    version=$(echo "$data" | awk 'BEGIN{ RS = "" ; FS = "\n" }{print $1}')
    image_name=$(echo "$data" | awk 'BEGIN{ RS = "" ; FS = "\n" }{print $2}')
    if [ -z "$version" ] || [ -z "$image_name" ]; then
        echo "ERROR: Unexpected API data."
        error_handler "unexpected API data"
    fi

    # Check that we didn't somehow get an empty version.
    if [ -z "$version" ]; then
        echo "ERROR: No version received."
        error_handler "no version received"
    fi
else
    echo "No supervisor configuration found from API or required variables not set. Using preloaded values."
    # shellcheck disable=SC1091
    . /etc/resin-supervisor/supervisor.conf
    if [ -n "$SUPERVISOR_VERSION_LABEL" ]; then
        UPDATER_SUPERVISOR_TAG=$SUPERVISOR_VERSION_LABEL
    else
        echo "ERROR: No preloaded version found."
        error_handler "no preloaded version found"
    fi
    if [ -n "$SUPERVISOR_IMAGE" ]; then
        UPDATER_SUPERVISOR_IMAGE=$SUPERVISOR_IMAGE
    else
        echo "ERROR: No preloaded image found."
        error_handler "no preloaded image found."
    fi
    echo "Set based on preloaded values image=$UPDATER_SUPERVISOR_IMAGE and version=$UPDATER_SUPERVISOR_TAG."
    image_name=$UPDATER_SUPERVISOR_IMAGE
    version=$UPDATER_SUPERVISOR_TAG
fi

# Get image id. This will be non-empty only in case it's already downloaded.
echo "Getting image id..."
imageid=$($DOCKER inspect -f '{{.Id}}' "$image_name") || imageid=""

if [ -n "$imageid" ]; then
    echo "Supervisor $image_name at version $version already downloaded."
    exit 0
fi

if [ "${START_STOP_SUPERVISOR}" -eq 1 ]; then
    # Try to stop old supervisor to prevent it deleting the intermediate images while downloading the new one
    echo "Stop supervisor..."
    systemctl stop resin-supervisor
fi

# Pull target version.
echo "Pulling supervisor $image_name..."
if $DOCKER pull "$image_name"; then
    image_id=$(balena_imageid_from_digest "${image_name}")
    $DOCKER tag "${image_id}" "${SUPERVISOR_APP}:${SUPERVISOR_VERSION_LABEL}"
    $DOCKER rm --force resin_supervisor || true
else
    error_handler "supervisor pull failed"
fi

# Store the image string so resin-supervisor.service can pick it up
sed -e "s|SUPERVISOR_IMAGE=.*|SUPERVISOR_IMAGE=$image_name|" -e "s|SUPERVISOR_VERSION_LABEL=.*|SUPERVISOR_VERSION_LABEL=$version|" /etc/resin-supervisor/supervisor.conf > $UPDATECONF

# Run supervisor with the device-type-specific options.
# We give a specific name to the container to guarantee only one running.
if [ "${START_STOP_SUPERVISOR}" -eq 1 ]; then
    echo "Start supervisor..."
    systemctl start resin-supervisor
fi

sed -i -e "s|SUPERVISOR_IMAGE=.*|SUPERVISOR_IMAGE=$image_name|" -e "s|SUPERVISOR_VERSION_LABEL=.*|SUPERVISOR_VERSION_LABEL=$version|" /etc/resin-supervisor/supervisor.conf
